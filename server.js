require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const dbQueries = require('./db.queries.js');
const cors = require('cors');

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const corsOptions = {
    origin: 'https://suvorov-studio.onrender.com', //  –£–∫–∞–∂–∏ —Å–≤–æ–π –¥–æ–º–µ–Ω
    optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

const port = process.env.PORT || 3000;
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É (–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π)
let loggedInUserId = null; //  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤–æ—à–µ–¥—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

function requireLogin(req, res, next) {
    if (!loggedInUserId) {
        return res.status(401).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.' });
    }
    next();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleUserMessage(text, userId) {
    console.log(`handleUserMessage called with text: "${text}" and userId: "${userId}"`);

    const lowerCaseText = text.toLowerCase().trim();
    const welcomeMessage = `
        üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ß–∞—Ç-–±–æ—Ç "–°—Ç—É–¥–∏–∏ –°—É–≤–æ—Ä–æ–≤–∞".<br>
        –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:<br>
        - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è], [email,–ø–∞—Ä–æ–ª—å,—Ç–µ–ª–µ—Ñ–æ–Ω]<br>
        - –í—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É: –≤–æ–π—Ç–∏ [email] [–ø–∞—Ä–æ–ª—å]<br>
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤: –º–∞—Å—Ç–µ—Ä–∞<br>
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: —É—Å–ª—É–≥–∏<br>
        - –ó–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–∏–µ–º: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è], [–º–∞—Å—Ç–µ—Ä,—É—Å–ª—É–≥–∞]<br>
        
        –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`;

    let botResponse = null;

    if (lowerCaseText === '–º–∞—Å—Ç–µ—Ä–∞') {
        try {
            const masters = await dbQueries.getMasters();
            if (masters && masters.length > 0) {
                let response = "–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤:\n";
                masters.forEach(master => {
                    response += `- ${master.name} (${master.specialization})\n`;
                });
                botResponse = response;
            } else {
                botResponse = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø—É—Å—Ç.";
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤:", error);
            botResponse = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤.";
        }
    }

    if (lowerCaseText === '—É—Å–ª—É–≥–∏') {
        try {
            const services = await dbQueries.getServices();
            if (services && services.length > 0) {
                let response = "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:\n";
                services.forEach(service => {
                    response += `- ${service.name} - ${service.description} - ${service.price}\n`;
                });
                botResponse = response;
            } else {
                botResponse = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç.";
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥:", error);
            botResponse = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥.";
        }
    }

    if (lowerCaseText.startsWith('–∑–∞–ø–∏—Å–∞—Ç—å—Å—è')) {
        const commandBody = lowerCaseText.slice('–∑–∞–ø–∏—Å–∞—Ç—å—Å—è'.length).trim();
        // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
        const parts = commandBody.split(',').map(part => part.trim());

        if (parts.length !== 2) {
            botResponse = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è], [–º–∞—Å—Ç–µ—Ä,—É—Å–ª—É–≥–∞]";
        } else {

            const [dateTimeStr, masterAndServiceName] = parts;
             const [masterName, serviceName] = masterAndServiceName.split(',').map(part => part.trim());


            // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            const dateTimeParts = dateTimeStr.split(' ');
            if (dateTimeParts.length < 2) {
                botResponse = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú";
            } else {
                const [date, time] = dateTimeParts;

                // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å–ª—É–≥—É
                try {
                    const master = await dbQueries.getMasterByName(masterName);
                    const service = await dbQueries.getServiceByName(serviceName);

                    if (!master || !service) {
                        botResponse = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥—É.";
                    } else {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º loggedInUserId
                        try {
                            const appointment = await dbQueries.createAppointment(loggedInUserId, service.service_id, master.master_id, date, time);
                            if (appointment) {
                                botResponse = `–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –º–∞—Å—Ç–µ—Ä—É ${master.name} –Ω–∞ ${date} –≤ ${time}.`;
                            } else {
                                botResponse = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å.";
                            }
                        } catch (error) {
                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error);
                            botResponse = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                        }
                    }
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏:", error);
                    botResponse = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                }
            }
        }
    }

    if (lowerCaseText.startsWith('–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')) {
        const commandBody = text.slice('–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'.length).trim();
        const parts = commandBody.split(',');

        if (parts.length !== 2) {
            botResponse = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è], [email,–ø–∞—Ä–æ–ª—å,—Ç–µ–ª–µ—Ñ–æ–Ω]";
        } else {

            const username = parts[0].trim();
            const remainingPart = parts[1].trim();
            const [email, password, phone] = remainingPart.split(',').map(part => part.trim()); // –†–∞–∑–¥–µ–ª—è–µ–º email, password –∏ phone

            if (!email || !password || !phone) {
                botResponse = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. [email,–ø–∞—Ä–æ–ª—å,—Ç–µ–ª–µ—Ñ–æ–Ω] –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç—ã–º–∏.";
            } else {
                try {
                    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é createUser –∏–∑ db.queries
                    const newUser = await dbQueries.createUser(username, email, password, phone);
                    console.log("New user created:", newUser);
                    botResponse = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!";
                } catch (error) {
                    console.error("Error registering user:", error);
                    if (error.constraint === 'users_email_key') {
                        botResponse = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";
                    } else {
                        botResponse = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.";
                    }
                }
            }
        }
    }

    if (lowerCaseText.startsWith('–≤–æ–π—Ç–∏')) {
        console.log("Processing '–≤–æ–π—Ç–∏' command");
        const parts = text.split(' ');
        if (parts.length < 3) {
            botResponse = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –≤–æ–π—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤–æ–π—Ç–∏ [email] [–ø–∞—Ä–æ–ª—å]";
        } else {
            const [_, email, password] = parts;

            try {
                const user = await dbQueries.getUserByEmail(email);
                if (!user) {
                    botResponse = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.";
                } else {
                    // –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π (–û–ü–ê–°–ù–û!)
                    if (password === user.password) {
                        console.log("Login successful:", user);
                        loggedInUserId = user.user_id; //  –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ—à–µ–¥—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        botResponse = "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!"; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
                    } else {
                        botResponse = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.";
                    }
                }

            } catch (error) {
                console.error("Error logging in:", error);
                botResponse = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ.";
            }
        }
    }

    if (!botResponse) {
        botResponse = `–í—ã —Å–∫–∞–∑–∞–ª–∏: ${text}`; // –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    return botResponse;
}

app.post('/api/message', async (req, res) => {
    const { text, userId } = req.body; // –ü–µ—Ä–µ–¥–∞–π—Ç–µ userId –≤ —Ç–µ–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    // –ò–ª–∏, –µ—Å–ª–∏ userId –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ‚Äî —á—Ç–æ –Ω–µ –æ—á–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
    if (!userId) {
        return res.status(401).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.' });
    }
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    try {
        const botResponse = await handleUserMessage(text, userId);
        await saveBotMessage(userId, botResponse);
        res.json({ response: botResponse });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        res.status(500).json({ message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è." });
    }
});

//  –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
app.get('/test-db', async (req, res) => {
    try {
        const result = await dbQueries.query('SELECT NOW()');
        res.json({ message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!', timestamp: result.rows[0].now });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', error: error.message });
    }
});

//  –î–æ–±–∞–≤–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/init', async (req, res) => {
    const welcomeMessage = `
        üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ß–∞—Ç-–±–æ—Ç "–°—Ç—É–¥–∏–∏ –°—É–≤–æ—Ä–æ–≤–∞".<br>
        –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:<br>
        - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è], [email,–ø–∞—Ä–æ–ª—å,—Ç–µ–ª–µ—Ñ–æ–Ω]<br>
        - –í—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É: –≤–æ–π—Ç–∏ [email] [–ø–∞—Ä–æ–ª—å]<br>
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤: –º–∞—Å—Ç–µ—Ä–∞<br>
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: —É—Å–ª—É–≥–∏<br>
        - –ó–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–∏–µ–º: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è], [–º–∞—Å—Ç–µ—Ä,—É—Å–ª—É–≥–∞]<br>
        
        –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`;
    try {
        res.json({ response: welcomeMessage });
    } catch (error) {
        console.error("Error sending welcome message:", error);
        res.status(500).json({ error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è." });
    }
});

// –ï–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/register', async (req, res) => {
    const { username } = req.body;
    const remainingPart = req.body.remainingPart;
    const [email, password, phone] = remainingPart.split(',').map(part => part.trim()); // –†–∞–∑–¥–µ–ª—è–µ–º email, password –∏ phone
    try {
        const newUser = await dbQueries.createUser(username, email, password, phone);
        res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', user: newUser });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error: error.message });
    }
});

// –ï–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/login', async (req, res) => {
    const { email, password } = req.body;
    try {
        const user = await dbQueries.getUserByEmail(email);
        if (user) {
            // –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
            if (password === user.password) {
                // –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!
                loggedInUserId = user.user_id;
                res.json({ message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!', user: { user_id: user.user_id, username: user.username, email: user.email } });
            } else {
                res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.' });
            }
        } else {
            res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ', error: error.message });
    }
});

//  –ï–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
app.get('/services', async (req, res) => {
    try {
        const services = await dbQueries.getServices();
        res.json(services);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥', error: error.message });
    }
});

// –ï–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
app.get('/masters', async (req, res) => {
    try {
        const masters = await dbQueries.getMasters();
        res.json(masters);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤', error: error.message });
    }
});

// –ï–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
app.post('/appointments', requireLogin, async (req, res) => { //  –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    const { serviceId, masterId, appointmentDate, appointmentTime } = req.body;
    try {
        const newAppointment = await dbQueries.createAppointment(loggedInUserId, serviceId, masterId, appointmentDate, appointmentTime);
        res.status(201).json({ message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', appointment: newAppointment });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏', error: error.message });
    }
});

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
