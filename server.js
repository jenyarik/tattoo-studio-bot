require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const dbQueries = require('./db.queries.js');
const cors = require('cors');
const { getMasters, getServices, createAppointment, getMasterByName, getServiceByName, saveBotMessage } = require('./db.queries.js');

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const corsOptions = {
    origin: 'https://suvorov-studio.onrender.com',
    optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

const port = process.env.PORT || 3000;
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

async function handleUserMessage(userId, text) {
    console.log(`handleUserMessage called with text: "${text}"`);
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "${text}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    const lowerCaseText = text.toLowerCase().trim(); // –î–æ–±–∞–≤–ª—è–µ–º trim() –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
    const welcomeMessage = `
        üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ß–∞—Ç-–±–æ—Ç "–°—Ç—É–¥–∏–∏ –°—É–≤–æ—Ä–æ–≤–∞".<br>
        –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:<br>
        - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π:  –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è], [email] [–ø–∞—Ä–æ–ª—å] [—Ç–µ–ª–µ—Ñ–æ–Ω]<br>
        - –í—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É: –≤–æ–π—Ç–∏ [email] [–ø–∞—Ä–æ–ª—å]<br>
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤: –º–∞—Å—Ç–µ—Ä–∞<br>
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: —É—Å–ª—É–≥–∏<br>
        - –ó–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–∏–µ–º: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è], [–º–∞—Å—Ç–µ—Ä], [—É—Å–ª—É–≥–∞]<br>
        
        –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`;

    let botResponse = null; //  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞

    if (lowerCaseText === '–º–∞—Å—Ç–µ—Ä–∞') {
        const masters = await dbQueries.getMasters();
        if (masters && masters.length > 0) {
            let response = "–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤:\n";
            masters.forEach(master => {
                response += `- ${master.name} (${master.specialization})\n`;
            });
            botResponse = response;
        } else {
            botResponse = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø—É—Å—Ç.";
        }
    }

    if (lowerCaseText === '—É—Å–ª—É–≥–∏') {
        const services = await dbQueries.getServices();
        if (services && services.length > 0) {
            let response = "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:\n";
            services.forEach(service => {
                response += `- ${service.name} - ${service.description} - ${service.price}\n`; 
            });
            botResponse = response;
        } else {
            botResponse = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç.";
        }
    }

   if (lowerCaseText.startsWith('–∑–∞–ø–∏—Å–∞—Ç—å—Å—è')) {
    console.log("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è'");  //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏

    const commandBody = lowerCaseText.slice('–∑–∞–ø–∏—Å–∞—Ç—å—Å—è'.length).trim();
    // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
    const parts = commandBody.split(',').map(part => part.trim());

    if (parts.length < 3) {
        console.log("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.");  //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è], [–∏–º—è –º–∞—Å—Ç–µ—Ä–∞], [—É—Å–ª—É–≥–∞]";
    }

    const [dateTimeStr, masterName, serviceName] = parts;

    // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const dateTimeParts = dateTimeStr.split(' ');
    if (dateTimeParts.length < 2) {
        console.log("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.");  //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú";
    }
    const [date, time] = dateTimeParts;
    console.log(`–î–∞—Ç–∞ (date): ${date}, –í—Ä–µ–º—è (time): ${time}, –ú–∞—Å—Ç–µ—Ä (masterName): ${masterName}, –£—Å–ª—É–≥–∞ (serviceName): ${serviceName}`); //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏

    // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å–ª—É–≥—É
    let master = null;
    let service = null;
    try {
        console.log(`–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ —Å –∏–º–µ–Ω–µ–º: "${masterName}"`); //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        master = await dbQueries.getMasterByName(masterName);
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–∞: ${JSON.stringify(master)}`); //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        console.log(`–ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏ —Å –∏–º–µ–Ω–µ–º: "${serviceName}"`); //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        service = await dbQueries.getServiceByName(serviceName);
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —É—Å–ª—É–≥–∏: ${JSON.stringify(service)}`); //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏:", error); //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏.";
    }

    if (!master) {
        console.log("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");  //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞.";
    }

    if (!service) {
        console.log("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");  //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—Å–ª—É–≥—É.";
    }

     console.log(`–ú–∞—Å—Ç–µ—Ä (master): ${JSON.stringify(master)}, –£—Å–ª—É–≥–∞ (service): ${JSON.stringify(service)}`); //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏

    let appointment = null;
    try {
        console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏: userId=${userId}, serviceId=${service.service_id}, masterId=${master.master_id}, date=${date}, time=${time}`);  //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        appointment = await dbQueries.createAppointment(userId, service.service_id, master.master_id, date, time);
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${JSON.stringify(appointment)}`);  //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error); //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    if (!appointment) {
        console.log("–ó–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.");  //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    if (appointment.error) {
        console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: ${appointment.error}`);  //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        return appointment.error; //  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ —Å –æ—à–∏–±–∫–æ–π
    }

    console.log("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.");  //  –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
    return `–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –º–∞—Å—Ç–µ—Ä—É ${master.name} –Ω–∞ ${date} –≤ ${time}.`;
}

    if (lowerCaseText.startsWith('–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')) {
       const commandBody = text.slice('–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'.length).trim();
       const parts = commandBody.split(',');

       if (parts.length !== 2) {
         botResponse = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è], [email –ø–∞—Ä–æ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω]";
       } else {

         const username = parts[0].trim();
         const remainingPart = parts[1].trim();
         const [email, password, phone] = remainingPart.split(' ');

         if (!email || !password || !phone) {
           botResponse = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.  [email] [–ø–∞—Ä–æ–ª—å] [—Ç–µ–ª–µ—Ñ–æ–Ω] –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–∞–º–∏.";
         } else {
             try {
                 // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é createUser –∏–∑ db.queries
                 const newUser = await dbQueries.createUser(username, email, password, phone);
                 console.log("New user created:", newUser);
                 botResponse = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!";
             } catch (error) {
                 console.error("Error registering user:", error);
                 if (error.constraint === 'users_email_key') {
                     botResponse = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";
                 } else {
                     botResponse = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.";
                 }
             }
         }
       }
    }

    if (lowerCaseText.startsWith('–≤–æ–π—Ç–∏')) {
        console.log("Processing '–≤–æ–π—Ç–∏' command");
        const parts = text.split(' ');
        if (parts.length < 3) {
           botResponse = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –≤–æ–π—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤–æ–π—Ç–∏ [email] [–ø–∞—Ä–æ–ª—å]";
        } else {
            const [_, email, password] = parts;

            try {
                const user = await dbQueries.getUserByEmail(email);
                if (!user) {
                  botResponse = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.";
                } else {
                    // –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π (–û–ü–ê–°–ù–û!)
                    if (password === user.password) {
                        console.log("Login successful:", user);
                        botResponse = "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!"; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
                    } else {
                        botResponse = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.";
                    }
                }

            } catch (error) {
                console.error("Error logging in:", error);
                botResponse = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ.";
            }
        }
    }

    if (!botResponse) {
       botResponse = `–í—ã —Å–∫–∞–∑–∞–ª–∏: ${text}`; // –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    return botResponse; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
}
app.post('/api/message', async (req, res) => {
    const { text, userId } = req.body;
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    //  –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    const botResponse = await handleUserMessage(userId, text);
    //  –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    try {
        await saveBotMessage(userId, botResponse);  
        console.log("Bot message saved");
    } catch (error) {
        console.error("Error saving bot message:", error);
    }
    res.setHeader('Content-Type', 'application/json'); 
    res.json({ response: botResponse });
});

//  –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
app.get('/test-db', async (req, res) => {
    try {
        const result = await dbQueries.query('SELECT NOW()'); // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        res.json({ message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!', timestamp: result.rows[0].now });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', error: error.message });
    }
});

//  –î–æ–±–∞–≤–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/init', async (req, res) => { //  –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç - `/init`
    const userId = '123'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π userId, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    const welcomeMessage = `
        üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ß–∞—Ç-–±–æ—Ç "–°—Ç—É–¥–∏–∏ –°—É–≤–æ—Ä–æ–≤–∞".<br>
        –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:<br>
        - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π:  –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è], [email] [–ø–∞—Ä–æ–ª—å] [—Ç–µ–ª–µ—Ñ–æ–Ω]<br>
        - –í—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É: –≤–æ–π—Ç–∏ [email] [–ø–∞—Ä–æ–ª—å]<br>
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤: –º–∞—Å—Ç–µ—Ä–∞<br>
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: —É—Å–ª—É–≥–∏<br>
        - –ó–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–∏–µ–º: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è], [–º–∞—Å—Ç–µ—Ä], [—É—Å–ª—É–≥–∞]<br>
        
        –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`;
    try {
        res.json({ response: welcomeMessage }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç
    } catch (error) {
        console.error("Error sending welcome message:", error);
        res.status(500).json({ error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è." });
    }
});

// –ï–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/register', async (req, res) => {
    const { username, email, password, phone } = req.body;
    try {
        const newUser = await dbQueries.createUser(username, email, password, phone); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', user: newUser });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error: error.message });
    }
});

// –ï–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/login', async (req, res) => {
    const { email, password } = req.body;
    try {
        const user = await dbQueries.getUserByEmail(email);
        if (user) {
            // –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π 
            if (password === user.password) {
                // –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!
                res.json({ message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!', user: { user_id: user.user_id, username: user.username, email: user.email } });
            } else {
                res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.' });
            }
        } else {
            res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ', error: error.message });
    }
});

//  –ï–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
app.get('/services', async (req, res) => {
    try {
        const services = await dbQueries.getServices();
        res.json(services);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥', error: error.message });
    }
});

// –ï–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
app.get('/masters', async (req, res) => {
    try {
        const masters = await dbQueries.getMasters();
        res.json(masters);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤', error: error.message });
    }
});

// –ï–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
app.post('/appointments', async (req, res) => {
    const { userId, serviceId, masterId, appointmentDate, appointmentTime } = req.body;
    try {
        const newAppointment = await dbQueries.createAppointment(userId, serviceId, masterId, appointmentDate, appointmentTime);
        res.status(201).json({ message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', appointment: newAppointment });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏', error: error.message });
    }
});

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
