// server.js
require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const dbQueries = require('./db.queries.js');
const cors = require('cors');

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const corsOptions = {
    origin: 'https://suvorov-studio.onrender.com',
    optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

const port = process.env.PORT || 3000;
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// --- Helper function to handle errors ---
function handleServerError(res, error, message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞') {
    console.error(message + ':', error);
    res.status(500).json({ message: message, error: error.message });
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async function handleUserMessage(userId, text) {
    console.log(`handleUserMessage called with text: "${text}" from user ${userId}`);

    const lowerCaseText = text.toLowerCase().trim();
    const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ß–∞—Ç-–±–æ—Ç "–°—Ç—É–¥–∏–∏ –°—É–≤–æ—Ä–æ–≤–∞".
        –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:
        - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π:  –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [email] [–ø–∞—Ä–æ–ª—å] [—Ç–µ–ª–µ—Ñ–æ–Ω]
        - –í—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É: –≤–æ–π—Ç–∏ [email] [–ø–∞—Ä–æ–ª—å]
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤: –º–∞—Å—Ç–µ—Ä–∞
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: —É—Å–ª—É–≥–∏
        - –ó–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–∏–µ–º: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è] [–º–∞—Å—Ç–µ—Ä] [—É—Å–ª—É–≥–∞]
        –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`;

    try {
        if (lowerCaseText === '–º–∞—Å—Ç–µ—Ä–∞') {
            const masters = await dbQueries.getMasters();
            if (masters && masters.length > 0) {
                let response = "–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤:\n";
                masters.forEach(master => {
                    response += `- ${master.name} (${master.specialization})\n`;
                });
                return response;
            } else {
                return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø—É—Å—Ç.";
            }
        } else if (lowerCaseText === '—É—Å–ª—É–≥–∏') {
            const services = await dbQueries.getServices();
            if (services && services.length > 0) {
                let response = "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:\n";
                services.forEach(service => {
                    response += `- ${service.name} - ${service.description} - ${service.price}\n`;
                });
                return response;
            } else {
                return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç.";
            }
        } else if (lowerCaseText.startsWith('–∑–∞–ø–∏—Å–∞—Ç—å—Å—è')) {
            const parts = lowerCaseText.split(' ');
            if (parts.length < 5) {
                return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è] [–º–∞—Å—Ç–µ—Ä] [—É—Å–ª—É–≥–∞]";
            }
            const [_, date, time, masterName, serviceName] = parts;

            const master = await dbQueries.getMasterByName(masterName);
            const service = await dbQueries.getServiceByName(serviceName);

            if (!master || !service) {
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥—É.";
            }

            const appointment = await dbQueries.createAppointment(userId, service.service_id, master.master_id, date, time);
            return `–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –º–∞—Å—Ç–µ—Ä—É ${master.name} –Ω–∞ ${date} –≤ ${time}.`;

        } else if (lowerCaseText.startsWith('–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')) {
            const parts = text.split(' ');
            if (parts.length < 5) {
                return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [email] [–ø–∞—Ä–æ–ª—å] [—Ç–µ–ª–µ—Ñ–æ–Ω]";
            }
            const [_, username, email, password, phone] = parts;
            try {
                const newUser = await dbQueries.createUser(username, email, password, phone); // –ü–∞—Ä–æ–ª—å —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ!
                console.log("New user created:", newUser);
                return "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!";
            } catch (error) {
                console.error("Error registering user:", error);
                if (error.constraint === 'users_email_key') {
                    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";
                }
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.";
            }
        } else if (lowerCaseText.startsWith('–≤–æ–π—Ç–∏')) {
            console.log("Processing '–≤–æ–π—Ç–∏' command");
            const parts = text.split(' ');
            if (parts.length < 3) {
                return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –≤–æ–π—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤–æ–π—Ç–∏ [email] [–ø–∞—Ä–æ–ª—å]";
            }
            const [_, email, password] = parts;

            try {
                const user = await dbQueries.getUserByEmail(email);
                if (!user) {
                    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.";
                }

                //  –°–†–ê–í–ù–ò–í–ê–ï–ú –ü–ê–†–û–õ–¨ –í –û–¢–ö–†–´–¢–û–ú –í–ò–î–ï!
                if (password !== user.password) {  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é (–û–ß–ï–ù–¨ –ù–ï–ë–ï–ó–û–ü–ê–°–ù–û!)
                    return "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.";
                }

                console.log("Login successful:", user);
                return "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!";

            } catch (error) {
                console.error("Error logging in:", error);
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ.";
            }
        }
        else {
            return `–í—ã —Å–∫–∞–∑–∞–ª–∏: ${text}`;
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:", error);
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.";
    }
}


// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ---
app.post('/api/message', async (req, res) => {
    const { text, userId } = req.body;
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    try {
        const botResponse = await handleUserMessage(userId, text);
        await dbQueries.saveBotMessage(userId, botResponse);
        console.log("Bot message saved");
        res.setHeader('Content-Type', 'application/json');
        res.json({ response: botResponse });

    } catch (error) {
        handleServerError(res, error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
    }
});

app.get('/test-db', async (req, res) => {
    try {
        const result = await dbQueries.query('SELECT NOW()');
        res.json({ message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!', timestamp: result.rows[0].now });
    } catch (error) {
        handleServerError(res, error, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î");
    }
});

app.get('/init', async (req, res) => {
    const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ß–∞—Ç-–±–æ—Ç "–°—Ç—É–¥–∏–∏ –°—É–≤–æ—Ä–æ–≤–∞".
        –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:
        - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π:  –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [email] [–ø–∞—Ä–æ–ª—å] [—Ç–µ–ª–µ—Ñ–æ–Ω]
        - –í—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É: –≤–æ–π—Ç–∏ [email] [–ø–∞—Ä–æ–ª—å]
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤: –º–∞—Å—Ç–µ—Ä–∞
        - –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: —É—Å–ª—É–≥–∏
        - –ó–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–∏–µ–º: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è] [–º–∞—Å—Ç–µ—Ä] [—É—Å–ª—É–≥–∞]
        –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É!`;
    try {
        res.json({ response: welcomeMessage });
    } catch (error) {
        handleServerError(res, error, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.");
    }
});

app.post('/register', async (req, res) => {
    const { username, email, password, phone } = req.body;
    try {
        const newUser = await dbQueries.createUser(username, email, password, phone); // –ü–∞—Ä–æ–ª—å —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ!
        res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', user: newUser });
    } catch (error) {
        handleServerError(res, error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }
});

app.post('/login', async (req, res) => {
    const { email, password } = req.body;
    try {
        const user = await dbQueries.getUserByEmail(email);
        if (!user) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.' });
        }

        // –°–†–ê–í–ù–ò–í–ê–ï–ú –ü–ê–†–û–õ–¨ –í –û–¢–ö–†–´–¢–û–ú –í–ò–î–ï!
        if (password !== user.password) { // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é (–û–ß–ï–ù–¨ –ù–ï–ë–ï–ó–û–ü–ê–°–ù–û!)
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.' });
        }

        res.json({ message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!', user: { user_id: user.user_id, username: user.username, email: user.email } });
    } catch (error) {
        handleServerError(res, error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }
});

app.get('/services', async (req, res) => {
    try {
        const services = await dbQueries.getServices();
        res.json(services);
    } catch (error) {
        handleServerError(res, error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥");
    }
});

app.get('/masters', async (req, res) => {
    try {
        const masters = await dbQueries.getMasters();
        res.json(masters);
    } catch (error) {
        handleServerError(res, error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤");
    }
});

app.post('/appointments', async (req, res) => {
    const { userId, serviceId, masterId, appointmentDate, appointmentTime } = req.body;
    try {
        const newAppointment = await dbQueries.createAppointment(userId, serviceId, masterId, appointmentDate, appointmentTime);
        res.status(201).json({ message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', appointment: newAppointment });
    } catch (error) {
        handleServerError(res, error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º");
    }
});

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
